async function hook(event: IO.IncomingEvent, context: LLMZ.CreateContext): Promise<void> {
  /** Your code starts below */


// >>>>>>>>>>>>>>>>>>>>>>
// This hook is generated and managed by the "agi/kbo" integration.
// This hook provides your autonomous nodes with a Table of Contents of the included knowledge of
// the knowledge bases used in your autonomous nodes (those included on the `search` tool).
// Do not edit this file manually.

const searchTools = context.tools.filter((x) => x.name === 'search')

await Promise.allSettled(searchTools.map(appendSearchToolTableOfContent))

async function appendSearchToolTableOfContent(search: LLMZ.Tool) {
  type SearchMetadata = { kbs: string[]; searchScope: 'all' | 'specific' }
  const meta: SearchMetadata = search.metadata?.kbs ?? {
    kbs: [],
    searchScope: 'all'
  }

  const kbs = meta.searchScope === 'specific' ? meta.kbs : Artifact.knowledge_base.map((x) => x.id)

  const passages = await Promise.allSettled(
    kbs.map((kbId) =>
      client.searchFiles({
        query: event.preview,
        consolidate: true,
        contextDepth: 2,
        limit: 2,
        tags: {
          purpose: 'master-summary',
          kbId
        }
      })
    )
  ).then((x) => x.flatMap((y) => (y.status === 'fulfilled' ? y.value.passages.map((p) => p.content) : [])))

  if (passages.length) {
    context.instructions += `## Table of Contents (for tool \`${search.name}\`)

The below is a summary of the knowledge included in the Knowledge Bases (available to you when calling \`${search.name}\` tool).

${passages.join('\n\n')}

`
  }
}

// End of the hook
// <<<<<<<<<<<<<<<<<<<<


  /** Your code ends here */
}